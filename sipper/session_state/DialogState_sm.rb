# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : DialogState.sm

require 'statemap'

class DsmState < Statemap::State

    def Entry(fsm) end

    def Exit(fsm) end

    def bye(fsm)
        Default(fsm)
    end

    def cancelled_rejected(fsm)
        Default(fsm)
    end

    def error(fsm)
        Default(fsm)
    end

    def one_xx_no_tag(fsm)
        Default(fsm)
    end

    def one_xx_tag(fsm)
        Default(fsm)
    end

    def replaced(fsm)
        Default(fsm)
    end

    def three_xx(fsm)
        Default(fsm)
    end

    def timeout(fsm)
        Default(fsm)
    end

    def two_xx(fsm)
        Default(fsm)
    end

    def Default(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : Default\n")
        end
        msg = "\nState: " + fsm.getState.getName +
            "\nTransition: " + fsm.getTransition + "\n"
        raise Statemap::TransitionUndefinedException, msg
    end

end

class DsmMap_Default < DsmState

end

class DsmMap_Trying < DsmMap_Default

    def cancelled_rejected(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Trying.cancelled_rejected\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Terminated)
        fsm.getState.Entry(fsm)
    end

    def one_xx_no_tag(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Trying.one_xx_no_tag\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Proceeding)
        fsm.getState.Entry(fsm)
    end

    def one_xx_tag(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Trying.one_xx_tag\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Early)
        fsm.getState.Entry(fsm)
    end

    def three_xx(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Trying.three_xx\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Terminated)
        fsm.getState.Entry(fsm)
    end

    def two_xx(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Trying.two_xx\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Confirmed)
        fsm.getState.Entry(fsm)
    end

end

class DsmMap_Proceeding < DsmMap_Default

    def cancelled_rejected(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Proceeding.cancelled_rejected\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Terminated)
        fsm.getState.Entry(fsm)
    end

    def one_xx_tag(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Proceeding.one_xx_tag\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Early)
        fsm.getState.Entry(fsm)
    end

    def three_xx(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Proceeding.three_xx\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Terminated)
        fsm.getState.Entry(fsm)
    end

    def two_xx(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Proceeding.two_xx\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Confirmed)
        fsm.getState.Entry(fsm)
    end

end

class DsmMap_Early < DsmMap_Default

    def one_xx_tag(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Early.one_xx_tag\n")
        end
    end

    def replaced(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Early.replaced\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Terminated)
        fsm.getState.Entry(fsm)
    end

    def three_xx(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Early.three_xx\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Terminated)
        fsm.getState.Entry(fsm)
    end

    def two_xx(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Early.two_xx\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Confirmed)
        fsm.getState.Entry(fsm)
    end

end

class DsmMap_Confirmed < DsmMap_Default

    def bye(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Confirmed.bye\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Terminated)
        fsm.getState.Entry(fsm)
    end

    def error(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Confirmed.error\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Terminated)
        fsm.getState.Entry(fsm)
    end

    def replaced(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Confirmed.replaced\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Terminated)
        fsm.getState.Entry(fsm)
    end

    def timeout(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Confirmed.timeout\n")
        end
        fsm.getState.Exit(fsm)
        fsm.setState(DsmMap::Terminated)
        fsm.getState.Entry(fsm)
    end

    def two_xx(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Confirmed.two_xx\n")
        end
    end

end

class DsmMap_Terminated < DsmMap_Default

    def bye(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Terminated.bye\n")
        end
    end

    def timeout(fsm)
        if fsm.getDebugFlag then
            fsm.getDebugStream.write("TRANSITION   : DsmMap::Terminated.timeout\n")
        end
    end

end

module DsmMap

    Trying = DsmMap_Trying::new('DsmMap.Trying', 0).freeze
    Proceeding = DsmMap_Proceeding::new('DsmMap.Proceeding', 1).freeze
    Early = DsmMap_Early::new('DsmMap.Early', 2).freeze
    Confirmed = DsmMap_Confirmed::new('DsmMap.Confirmed', 3).freeze
    Terminated = DsmMap_Terminated::new('DsmMap.Terminated', 4).freeze
    Default = DsmMap_Default::new('DsmMap.Default', -1).freeze

end

class Dsm_sm < Statemap::FSMContext

    def initialize(owner)
        super()
        @_owner = owner
        setState(DsmMap::Trying)
        DsmMap::Trying.Entry(self)
    end

    def bye()
        @_transition = 'bye'
        getState.bye(self)
        @_transition = nil
    end

    def cancelled_rejected()
        @_transition = 'cancelled_rejected'
        getState.cancelled_rejected(self)
        @_transition = nil
    end

    def error()
        @_transition = 'error'
        getState.error(self)
        @_transition = nil
    end

    def one_xx_no_tag()
        @_transition = 'one_xx_no_tag'
        getState.one_xx_no_tag(self)
        @_transition = nil
    end

    def one_xx_tag()
        @_transition = 'one_xx_tag'
        getState.one_xx_tag(self)
        @_transition = nil
    end

    def replaced()
        @_transition = 'replaced'
        getState.replaced(self)
        @_transition = nil
    end

    def three_xx()
        @_transition = 'three_xx'
        getState.three_xx(self)
        @_transition = nil
    end

    def timeout()
        @_transition = 'timeout'
        getState.timeout(self)
        @_transition = nil
    end

    def two_xx()
        @_transition = 'two_xx'
        getState.two_xx(self)
        @_transition = nil
    end

    def getState()
        if @_state.nil? then
            raise Statemap::StateUndefinedException
        end
        return @_state
    end

    def getOwner()
        return @_owner
    end

end
