// Non Invite Server Transaction. Section 17.2.2

%class Nist

%start NistMap::Initial

%map NistMap

%%
// The two transitions from Initial state for cancel are basically valid if this NIST is for CANCEL.
// cancel_with_st is called if there is an existing STx that is being canceled and a 200/CANCEL is required
// to be sent. cancel_with_no_st is called when no STx is found and so a 481/CANCEL is required to be 
// sent. 
Initial
{
  request                     Trying     { __consume_msg(true); }       //i
  cancel_with_st(r: resp)     Completed  { __send_final_response(r); __consume_msg(true); } //i for sending 2xx
  cancel_with_no_st(r: resp)  Completed  { __send_final_response(r); __consume_msg(false); } //i for sending 481
}


Trying 
{
  request              nil               { __consume_msg(false); } // i
  provisional(r: resp) Proceeding        { __send_provisional_response(r); } //o
  final(r: resp)       Completed         { __send_final_response(r); }      //o
  transport_err        Terminated        { __transport_err(); }  // even though not mentioned in RFC
}



Proceeding
{
  provisional(r: resp)       nil        { __send_provisional_response(r); }   //o
  request                    nil        { __send_last_response(); __consume_msg(false); }  //i 
  final(r: resp)             Completed  { __send_final_response(r); }      //o
  transport_err              Terminated { __transport_err(); }
}


Completed 
Entry { __start_J(); }
Exit  { __cancel_J(); }
{
  request                    nil     { __send_last_response(); __consume_msg(false); }  //i
  cancel_with_st(r: resp)    nil     { __send_last_response(); __consume_msg(false); } //i for sending 2xx
  cancel_with_no_st(r: resp) nil     { __send_last_response(); __consume_msg(false); } //i for sending 481
  final(r: resp)     nil        { }      //o discard
  timer_J            Terminated { __timeout(); }
  transport_err      Terminated { __transport_err(); }  
}


Terminated
Entry { __cleanup(); }
{
}

%%