require 'monitor'

require 'session'
require 'sip_logger'

class SessionManager
  include SipLogger
    
  # When a new call is created and the request is sent out only From tag
  # is present, at this time the entry is local_tag+call_id and the session
  # gets in the half_dialogs hash.  
  # 
  # When a response is received, the full_dialogs is searched first, if not 
  # found then half_dialogs is searched. If the response is final and has a To tag  
  # we transition the session from half_dialogs hash to full_dialogs
  # hash with the key as local_tag+call_id+remote_tag, actually half dialog entry still
  # remains to absorb retransmissions. 
  # 
  # When request is received and it contains no To tag then a new session is
  # created and entry goes to half dialogs when a response is sent out the session 
  # transitions to full_dialogs hash if the response is final.
  # 
  # We do not remove the entry from the half dialog maps even when getting or receiving 
  # final responses. Instead we record the half dialog key in the session object and also
  # add the session in the full dialog map. This is to take care of retransmission of both 
  # Request and Responses (if we retransmitted request before). Then entry shall be removed 
  # from the half dialog map when the transaction completes or on session termination.  
  # 
  # If a request is received with a To tag, only full_dialogs is searched.
  # 
  # The session is removed either explicitly by calling invalidate or when
  # timeout happens todo timeouts
  # 
  @@full_dialogs = {}
  # both local and remote dialogs are half dialogs
  # local is for requests generated by us and remote
  # or the far end UA. We transition to full map on dialog establishment from 
  # both of these.
  @@half_dialogs = {}                     
  @@sm_lock = Monitor.new
  
  
  # Invoked on all incoming responses with or w/out remote tag
  # and incoming requests with or without both tags. 
  # For requests without to tag a new session is created and when 
  # responded to, it transitions to full_dialogs from half dialogs
  # 
  @@slog = SipLogger['siplog::sessionmanager'];
  
  def self.full_dialogs
    @@full_dialogs
  end
  
  def SessionManager.find_session call_id, local, remote, final=false
    @@slog.info("Finding session for key |#{local}|#{call_id}|#{remote}|") if @@slog.info?
    #@@slog.debug("Half map at this time is #{@@half_dialogs.keys.join(',')}") if @@slog.debug?
    #@@slog.debug("Full map at this time is #{@@full_dialogs.keys.join(',')}") if @@slog.debug?
    s = nil
    key = sprintf("|%s|%s|%s|",local, call_id, remote)
    @@sm_lock.synchronize do
      if remote
        if local 
          s = @@full_dialogs[key]
          unless s
            @@slog.info("Not found in full dialog map looking in half") if @@slog.info?
            key_l = sprintf("|%s|%s|%s|",local, call_id, nil)
            if (s = @@half_dialogs[key_l])
              if final
                #@@half_dialogs[key_l] = nil #instead of removing from half, just record half dialog.
                s.half_dialog_key = key_l
                s.session_map = :full
                s.session_key = key 
                @@slog.info("Found in half copying to full") if @@slog.info?
                @@full_dialogs[key] = s
              else
                @@slog.info("Found in half NOT copying to full") if @@slog.info?
              end
            end
          else
            @@slog.info("Found in the full dialogs map") if @@slog.info?
            # cleaning up in case a NOTIFY came before 2xx and now we have 2xx
            if final
              key_l = sprintf("|%s|%s|%s|",local, call_id, nil)
              #@@half_dialogs[key_l] = nil  #instead of removing from half, just record half dialog.
              s.half_dialog_key = key_l
              s.session_map = :full
              s.session_key = key
              @@slog.info("Found in full NOW moving to full") if @@slog.info?
            end
          end
        else  #local not present but remote present
          s = @@half_dialogs[key]
        end
      else #remote not present      
        s = @@half_dialogs[key]
      end
    end
    return s
  end
    
  
  # addition of session happens on new req out, resp out for new req,
  # But this is called whenever any message is being sent out. If both the  
  # local and remote tags are present then add in the full_dialogs hash, otherwise 
  # just add in the half_dialogs hash, in both cases mark in the session
  # if the session was in half dialog hash and you are adding in full then remove
  # from HD Map. If the session is already in full then do not do anything.
  
  def SessionManager.add_session session, final=false
    @@slog.debug("Trying to add session with session.session_map #{session.session_map} local_tag=#{session.local_tag} and remote_tag=#{session.remote_tag}") if @@slog.debug?
    if session.session_map == :full && !session.force_update_session_map
        @@slog.info("Already in full map") if @@slog.info?
      return
    end
    if ((session.session_map == :half) && 
        !(session.remote_tag && session.local_tag)) && 
        !session.force_update_session_map
      @@slog.info("Already in half map, nothing new") if @@slog.info?
      return  
    end
    key = sprintf("|%s|%s|%s|", session.local_tag, session.call_id, session.remote_tag)
    if session.remote_tag
      if session.local_tag
        @@sm_lock.synchronize do
          @@full_dialogs[key] = session
          #@@half_dialogs[session.session_key] = nil if ((session.session_map == :half) && final)
          session.half_dialog_key = session.session_key
        end
        session.session_map = :full
      else  # incoming request and 100 responses out   
        @@sm_lock.synchronize do
          @@half_dialogs[key] = session
        end
        session.session_map = :half
      end
    else
      @@sm_lock.synchronize do
        @@half_dialogs[key] = session
      end
      session.session_map = :half
    end
    @@slog.debug("Setting the session_key as #{key}") if @@slog.debug?
    session.session_key = key
  end
  
  
  def SessionManager.remove_session session, half_only=false
    @@sm_lock.synchronize do
      @@half_dialogs.delete(session.half_dialog_key) if session.half_dialog_key
      @@slog.info("Removed session with key #{session.half_dialog_key} from half_dialogs map") if @@slog.info?
      return if half_only
    end
    if session.session_map == :full
      @@sm_lock.synchronize do
        @@full_dialogs.delete(session.session_key) 
      end    
      @@slog.info("Removed session with key #{session.session_key} from full_dialogs map") if @@slog.info?
    elsif session.session_map == :half
      @@sm_lock.synchronize do
        @@half_dialogs.delete(session.session_key)
      end 
      @@slog.info("Removed session with key #{session.session_key} from half_dialogs map") if @@slog.info?
    else
      @@slog.warn("Session with call_id #{session.call_id } does not have any map information") if @@slog.warn?
    end
  end
  
  def SessionManager.clean_all
    @@sm_lock.synchronize do
      @@full_dialogs = {}
      @@half_dialogs = {}
    end
  end
  
  
end
